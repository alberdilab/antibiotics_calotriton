[["index.html", "AlberdiLab | Aizpurua et al. 2024 Calotriton metagenomics Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Aizpurua et al. 2024 Calotriton metagenomics Ostaizka Aizpurua1 Carlos Cabido2 Garazi Martin Bideguren3 Antton Alberdi4 2024-06-20 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of gut microbiomes of newts across different rivers. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/calotriton_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ Aranzadi Science Society↩︎ University of Copenhagen, garazi.bideguren@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 Create working objects 2.3 Load data statistics 2.4 Prepare color scheme 2.5 Wrap working objects", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/metadata_antibiotics.tsv&quot;) 2.1.2 Read counts read_counts_raw &lt;- read_tsv(&quot;data/genome.count.tsv&quot;) %&gt;% rename(genome=1) #Transformation of read_counts to combine data from both sequence rounds merge_and_rename &lt;- function(read_counts_raw) { read_counts_raw %&gt;% # Gather the columns into long format pivot_longer(cols = -genome, names_to = &quot;col&quot;) %&gt;% # Extract prefix mutate(prefix = gsub(&quot;^(.*?)_.*&quot;, &quot;\\\\1&quot;, col)) %&gt;% # Group by prefix and genome, then summarize group_by(prefix, genome) %&gt;% summarize(value = sum(value)) %&gt;% # Spread the data back to wide format pivot_wider(names_from = prefix, values_from = value) } read_counts &lt;- merge_and_rename(read_counts_raw) 2.1.3 Genome base hits genome_hits_raw &lt;- read_tsv(&quot;data/genome.covered_bases.tsv&quot;) %&gt;% rename(genome=1) #Transformation of genome_hits to combine data from both sequence rounds merge_and_rename &lt;- function(genome_hits_raw) { genome_hits_raw %&gt;% # Gather the columns into long format pivot_longer(cols = -genome, names_to = &quot;col&quot;) %&gt;% # Extract prefix mutate(prefix = gsub(&quot;^(.*?)_.*&quot;, &quot;\\\\1&quot;, col)) %&gt;% # Group by prefix and genome, then summarize group_by(prefix, genome) %&gt;% summarize(value = sum(value)) %&gt;% # Spread the data back to wide format pivot_wider(names_from = prefix, values_from = value) } genome_hits &lt;- merge_and_rename(genome_hits_raw) 2.1.4 Genome taxonomy genome_taxonomy &lt;- read_tsv(&quot;data/gtdbtk.summary.tsv&quot;) %&gt;% select(mag_id = user_genome, classification) %&gt;% separate( classification, into = c(&quot;domain&quot;, &quot;phylum&quot;, &quot;class&quot;, &quot;order&quot;, &quot;family&quot;, &quot;genus&quot;, &quot;species&quot;), sep = &quot;;&quot;) %&gt;% rename(genome=1) 2.1.5 Genome quality genome_quality &lt;- read_tsv(&quot;data/quality_report.tsv&quot;) %&gt;% select( genome = Name, completeness = Completeness, contamination = Contamination, length = Genome_Size, gc = GC_Content ) genome_quality&lt;-genome_quality %&gt;% mutate (genome=str_remove_all(genome,&quot;.fa&quot;)) 2.1.6 Genome tree genome_tree &lt;- read_tree(&quot;data/gtdbtk.backbone.bac120.classify.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_taxonomy$genome) # keep only MAG tips 2.1.7 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/annotations.tsv.gz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Merge genome taxonomy and quality genome_metadata &lt;- genome_taxonomy %&gt;% inner_join(genome_quality,by=join_by(genome==genome)) #join quality 2.2.2 Calculate genome coverage genome_coverage &lt;- genome_hits %&gt;% mutate(across(where(is.numeric), ~ ./genome_metadata$length)) 2.2.3 Filter reads by coverage read_counts &lt;- read_counts %&gt;% semi_join(genome_quality, by = &quot;genome&quot;) min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.4 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.5 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19)) 2.3 Load data statistics 2.3.1 Raw reads raw_reads &lt;- &quot;data/multiqc_general_stats.txt&quot; %&gt;% read_tsv() %&gt;% select( sample = Sample, raw_reads = `FastQC_mqc-generalstats-fastqc-total_sequences` ) %&gt;% mutate(sample_prefix = str_extract(sample, &quot;^[^_]+&quot;)) %&gt;% group_by(sample_prefix) %&gt;% summarize(raw_reads = sum(raw_reads, na.rm = TRUE)) %&gt;% rename(sample = sample_prefix) %&gt;% mutate(sample = str_remove(sample, &quot;^fastp \\\\|\\\\s*&quot;)) 2.3.2 Quality-filtered reads fastp_reads &lt;- &quot;data/multiqc_general_stats.txt&quot; %&gt;% read_tsv() %&gt;% filter(str_detect(Sample, &quot;fastp&quot;)) %&gt;% select( sample = Sample, trimmed_reads = `FastQC_mqc-generalstats-fastqc-total_sequences` ) %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_[u12]+$&quot;) %&gt;% str_remove_all(&quot;^fastp \\\\| &quot;) ) %&gt;% mutate(sample_prefix = str_extract(sample, &quot;^[^_]+&quot;)) %&gt;% group_by(sample_prefix) %&gt;% summarize(trimmed_reads = sum(trimmed_reads, na.rm = TRUE)) %&gt;% rename(sample = sample_prefix) 2.3.3 Host-mapped reads host_mapped &lt;- &quot;data/multiqc_general_stats.txt&quot; %&gt;% read_tsv() %&gt;% filter(!str_detect(Sample, &quot;fastp&quot;)) %&gt;% select( sample = Sample, host_mapped = `Samtools_mqc-generalstats-samtools-reads_mapped`, mapping_total = `Samtools_mqc-generalstats-samtools-raw_total_sequences` ) %&gt;% mutate( host_unmapped = mapping_total - host_mapped ) %&gt;% filter(!is.na(host_mapped)) %&gt;% separate( col = sample, into = c(&quot;host_name&quot;, &quot;sample&quot;), sep = &quot; \\\\| &quot; ) %&gt;% rename(mapped = host_mapped, unmapped = host_unmapped) %&gt;% select(-mapping_total) %&gt;% pivot_longer(-host_name:-sample) %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_[u12]+$&quot;) %&gt;% str_remove_all(&quot;^fastp \\\\| &quot;) ) %&gt;% select(-host_name) %&gt;% pivot_wider()%&gt;% mutate(sample = str_extract(sample, &quot;^[^_]+&quot;)) %&gt;% group_by(sample) %&gt;% summarize( mapped = sum(mapped), unmappedd = sum(unmapped) ) 2.3.4 Prokaryotic fraction singlem &lt;- &quot;data/microbial_fraction.tsv&quot; %&gt;% read_tsv() %&gt;% distinct() %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_1$&quot;), read_fraction = read_fraction %&gt;% str_remove(&quot;%&quot;) %&gt;% as.numeric(), read_fraction = read_fraction / 100 ) %&gt;% select( sample, singlem_prokaryotic_bases = bacterial_archaeal_bases, singlem_metagenome_size = metagenome_size, singlem_read_fraction = read_fraction, ) %&gt;% mutate(sample_prefix = str_extract(sample, &quot;^[^_]+&quot;)) %&gt;% group_by(sample_prefix) %&gt;% summarize( singlem_prokaryotic_bases = sum(singlem_prokaryotic_bases), singlem_metagenome_size = sum(singlem_metagenome_size), singlem_read_fraction = mean(singlem_read_fraction) ) %&gt;% rename(sample = sample_prefix) 2.3.5 MAG-mapped reads mag_mapping &lt;- read_tsv(&quot;data/contig.count.tsv&quot;) %&gt;% pivot_longer(-sequence_id) %&gt;% summarise(value = sum(value), .by = &quot;name&quot;) %&gt;% rename(sample = name, mapped_mags = value) %&gt;% mutate(sample_prefix = str_extract(sample, &quot;^[^_]+&quot;)) %&gt;% group_by(sample_prefix) %&gt;% summarize( mapped_mags = sum(mapped_mags) ) %&gt;% rename(sample = sample_prefix) 2.3.6 Wrap data statistics data_stats &lt;- raw_reads %&gt;% left_join(fastp_reads) %&gt;% left_join(host_mapped) %&gt;% left_join(singlem) %&gt;% left_join(mag_mapping) data_stats&lt;- data_stats %&gt;% filter(!str_detect(sample, &quot;newr \\\\|&quot;)) %&gt;% filter(!str_detect(sample, &quot;nonnewr \\\\|&quot;)) 2.4 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.5 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, data_stats, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 DNA fractions 3.3 Recovered microbial fraction", " Chapter 3 Data statistics load(&quot;data/data.Rdata&quot;) 3.1 Sequencing reads statistics data_stats$raw_reads %&gt;% sum() [1] 306291936 data_stats$raw_reads %&gt;% mean() [1] 27844721 data_stats$raw_reads %&gt;% sd() [1] 15050982 3.2 DNA fractions #Overall data_stats %&gt;% mutate(mapped_perc=mapped_mags/trimmed_reads) %&gt;% summarise(mean=mean(mapped_perc),sd=sd(mapped_perc)) # A tibble: 1 × 2 mean sd &lt;dbl&gt; &lt;dbl&gt; 1 0.538 0.186 data_stats %&gt;% mutate( low_quality = raw_reads - trimmed_reads, unmapped_reads = trimmed_reads - mapped - mapped_mags ) %&gt;% select(sample, low_quality, mapped, mapped_mags, unmapped_reads) %&gt;% pivot_longer(-sample) %&gt;% mutate(name=factor(name,levels=c(&quot;low_quality&quot;,&quot;mapped&quot;,&quot;unmapped_reads&quot;,&quot;mapped_mags&quot;))) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!is.na(time_point)) %&gt;% ggplot(aes(x = sample, y = value, fill = name)) + geom_bar(stat = &quot;identity&quot;, position = &quot;fill&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;low_quality&quot;,&quot;mapped&quot;,&quot;unmapped_reads&quot;,&quot;mapped_mags&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ facet_grid(~time_point, scales = &quot;free&quot;) + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1, size=0)) + labs(y=&quot;DNA sequence fraction&quot;,x=&quot;Samples&quot;) 3.3 Recovered microbial fraction data_stats %&gt;% mutate( unmapped_reads = trimmed_reads - mapped - mapped_mags, mag_proportion = mapped_mags / (mapped_mags + unmapped_reads), singlem_read_fraction = singlem_read_fraction ) %&gt;% select(sample, mag_proportion, singlem_read_fraction) %&gt;% mutate( mag_proportion = if_else(singlem_read_fraction == 0, 0, mag_proportion), singlem_read_fraction = if_else(singlem_read_fraction == 0, NA, singlem_read_fraction), singlem_read_fraction = if_else(singlem_read_fraction &lt; mag_proportion, NA, singlem_read_fraction), singlem_read_fraction = if_else(singlem_read_fraction &gt; 1, 1, singlem_read_fraction) ) %&gt;% pivot_longer(-sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% mutate( proportion = factor( proportion, levels = c(&quot;mag_proportion&quot;, &quot;singlem_read_fraction&quot;) ) ) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!is.na(time_point)) %&gt;% ggplot(aes(x = sample, y = value, color = proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mag_proportion&quot;,&quot;singlem_read_fraction&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ theme_minimal() + facet_grid(~time_point, scales = &quot;free&quot;, space=&quot;free&quot;)+ labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction&quot;) + scale_y_continuous(limits = c(0, 1)) + theme( axis.text.y = element_text(size = 4), axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1, size = 0), legend.position = &quot;right&quot; ) damr &lt;- data_stats %&gt;% mutate( unmapped_reads = trimmed_reads - mapped - mapped_mags, mag_proportion = mapped_mags / (mapped_mags + unmapped_reads), singlem_read_fraction = singlem_read_fraction ) %&gt;% mutate(damr=pmin(1, mag_proportion/singlem_read_fraction)) %&gt;% select(sample,damr) damr %&gt;% tt() tinytable_jbd8t7213ytgg3jlu5dc .table td.tinytable_css_klwst95nqnms2uvxtnwo, .table th.tinytable_css_klwst95nqnms2uvxtnwo { border-bottom: solid 0.1em #d3d8dc; } sample damr AJ63 0.8871917 AJ72 0.9113469 AJ75 0.6412661 AJ78 1.0000000 AJ99 0.9338402 AK01 0.9382997 AK03 0.9822361 AK05 0.9898064 AK12 0.9035974 AK13 1.0000000 AK14 0.9864139 damr %&gt;% filter(damr&gt;95) %&gt;% nrow() [1] 0 damr %&gt;% summarise(mean=mean(damr),sd=sd(damr)) %&gt;% tt() tinytable_pkkcn0k5l3r8ihwc7g5g .table td.tinytable_css_r2hs0u4wgfqx0bndkp75, .table th.tinytable_css_r2hs0u4wgfqx0bndkp75 { border-bottom: solid 0.1em #d3d8dc; } mean sd 0.924908941650993 0.10263104498468 "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Genome quality 4.3 Functional overview 4.4 Functional ordination", " Chapter 4 MAG catalogue load(&quot;data/data.Rdata&quot;) 4.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;ArialMT&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;ArialMT&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;ArialMT&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) ## Taxonomy overview genome_metadata %&gt;% group_by(phylum) %&gt;% summarise(mag_n=n()) %&gt;% arrange(-mag_n) %&gt;% tt() tinytable_kbmwo3e9f0s6flnjhqqo .table td.tinytable_css_u9h4eok3jncolom3yvr3, .table th.tinytable_css_u9h4eok3jncolom3yvr3 { border-bottom: solid 0.1em #d3d8dc; } phylum mag_n p__Bacteroidota 48 p__Bacillota_A 33 p__Pseudomonadota 13 p__Bacillota 8 p__Verrucomicrobiota 6 p__Cyanobacteriota 3 p__Desulfobacterota 2 p__Bacillota_B 1 p__Bacillota_C 1 4.2 Genome quality genome_metadata %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_a5lqc49jkn2x1z3i6l3g .table td.tinytable_css_0g3vnwh8buffjxvpcy4m, .table th.tinytable_css_0g3vnwh8buffjxvpcy4m { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 92.91 ± 7.09 1.94 ± 2.24 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 4.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 5 Community composition 5.1 Taxonomy overview 5.2 Taxonomy boxplot", " Chapter 5 Community composition load(&quot;data/data.Rdata&quot;) 5.1 Taxonomy overview 5.1.1 Stacked barplot genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ individual + time_point, scales=&quot;free&quot;, labeller=labeller(time_point=c(&quot;Pre_antibiotics&quot;=&quot;Pre_ant&quot;, &quot;Post_antibiotics_1&quot;=&quot;Post_ant_1&quot;, &quot;Post_antibiotics_2&quot;=&quot;Post_ant_2&quot;)) ) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) 5.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_v0cm6kasucxbucmei51d .table td.tinytable_css_9z4lypxbvtb6tk8b1nfy, .table th.tinytable_css_9z4lypxbvtb6tk8b1nfy { border-bottom: solid 0.1em #d3d8dc; } phylum mean sd p__Bacteroidota 0.524440141 0.127316510 p__Bacillota_A 0.218129853 0.075749924 p__Pseudomonadota 0.100829714 0.168802352 p__Bacillota 0.065661524 0.051944414 p__Verrucomicrobiota 0.047313902 0.048648719 p__Cyanobacteriota 0.015633063 0.021233104 p__Desulfobacterota 0.013819770 0.006889224 p__Bacillota_C 0.012453388 0.013842018 p__Bacillota_B 0.001718646 0.002287117 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 5.2 Taxonomy boxplot 5.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_f7zy9mhja6r07xtbbgxa .table td.tinytable_css_1ri5lwp50srjwb4gev2o, .table th.tinytable_css_1ri5lwp50srjwb4gev2o { border-bottom: solid 0.1em #d3d8dc; } family mean sd f__Bacteroidaceae 0.2111761804 0.139716297 f__Rikenellaceae 0.1262345009 0.041183911 f__Lachnospiraceae 0.1221559156 0.056348298 f__Tannerellaceae 0.0597688994 0.038763633 f__ 0.0558781360 0.053517532 f__Erysipelotrichaceae 0.0503603704 0.049830980 f__Marinifilaceae 0.0499502203 0.026876894 f__UBA932 0.0335510817 0.041786274 f__Ruminococcaceae 0.0326684282 0.026453449 f__Akkermansiaceae 0.0298155750 0.049482943 f__Oscillospiraceae 0.0271637611 0.018607679 f__Burkholderiaceae_A 0.0269794972 0.057963873 f__Gastranaerophilaceae 0.0156330633 0.021233104 f__Burkholderiaceae_B 0.0142393093 0.042253051 f__Desulfovibrionaceae 0.0138197700 0.006889224 f__Alteromonadaceae 0.0126841890 0.037279818 f__Enterobacteriaceae 0.0110005401 0.018192813 f__Butyricicoccaceae 0.0109420628 0.006933355 f__CAG-239 0.0106659324 0.014861691 f__CALVMC01 0.0098587671 0.017356533 f__Moraxellaceae 0.0087097650 0.019763859 f__Burkholderiaceae 0.0081400791 0.026997588 f__JADKCL01 0.0076424144 0.025347021 f__UBA660 0.0069343163 0.015713124 f__Acutalibacteraceae 0.0056333801 0.007365987 f__Muribaculaceae 0.0046063404 0.003466581 f__Coprobacillaceae 0.0044443621 0.004445464 f__UBA3830 0.0042073343 0.010172731 f__Mycoplasmoidaceae 0.0039224751 0.006889425 f__Flavobacteriaceae 0.0036983513 0.012266044 f__UBA3700 0.0036927654 0.012247517 f__Aeromonadaceae 0.0032090159 0.007940373 f__CHK158-818 0.0025811994 0.002580585 f__Anaerotignaceae 0.0023321053 0.002969332 f__Peptococcaceae 0.0017186456 0.002287117 f__Anaerovoracaceae 0.0015862187 0.004037860 f__UBA1829 0.0014009798 0.002725359 f__Pseudomonadaceae 0.0009940515 0.003108676 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() # Per time_point family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~time_point)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 5.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,phylum,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) genus_summary_sort &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) genus_summary_sort %&gt;% tt() tinytable_9za01x377saevsjz0570 .table td.tinytable_css_pk2osnz5pu48f5phliob, .table th.tinytable_css_pk2osnz5pu48f5phliob { border-bottom: solid 0.1em #d3d8dc; } genus mean sd Bacteroides 0.1775249332 0.109314357 Parabacteroides 0.0554095726 0.035124121 Mucinivorans 0.0552600046 0.049550217 Odoribacter 0.0401415283 0.024399876 Alistipes 0.0397499792 0.028185247 Clostridium_Q 0.0363715276 0.020090245 Egerieousia 0.0335510817 0.041786274 SZUA-378 0.0290183038 0.040693410 JAEZVV01 0.0269794972 0.057963873 Akkermansia 0.0223731622 0.046989793 Bacteroides_G 0.0189263693 0.040746534 Paucibacter_A 0.0142393093 0.042253051 Amedibacillus 0.0141985824 0.029133436 Dielma 0.0141336576 0.016330606 Intestinimonas 0.0133394420 0.010705642 Pararheinheimera 0.0126841890 0.037279818 Pseudoflavonifractor 0.0125791301 0.011106296 Citrobacter 0.0110005401 0.018192813 Hydrogenoanaerobacterium 0.0094715505 0.010554697 14-2 0.0092323435 0.007386213 Anaerotruncus 0.0089714879 0.009209991 Acinetobacter 0.0087097650 0.019763859 Avirikenella 0.0084205153 0.010938908 Pseudoduganella 0.0081400791 0.026997588 Bilophila 0.0071557312 0.004629539 Spyradomonas 0.0070402620 0.008193530 Hungatella_A 0.0066989150 0.009041871 Tidjanibacter 0.0060839003 0.005550803 CAJGBR01 0.0056953492 0.003603446 JADFUS01 0.0056704093 0.005147440 DUWA01 0.0056452122 0.015640734 Mobilisporobacter 0.0054593818 0.007616962 JAIHAL01 0.0047986372 0.007841867 HGM05232 0.0046063404 0.003466581 Coprobacillus 0.0044443621 0.004445464 Parabacteroides_B 0.0043593269 0.004775063 CAZU01 0.0041733530 0.011570149 Mycoplasma_L 0.0039224751 0.006889425 Flavobacterium 0.0036983513 0.012266044 UMGS1251 0.0033243891 0.006216785 Negativibacillus 0.0032342216 0.004905132 Aeromonas 0.0032090159 0.007940373 Scatacola_A 0.0030305489 0.007129984 OM05-12 0.0028388258 0.003946216 Gallibacteroides 0.0025811994 0.002580585 JAAYQI01 0.0023321053 0.002969332 Hespellia 0.0021290168 0.004757466 Massiliimalia 0.0019923222 0.004302461 Intestinibacillus 0.0018143641 0.003265593 Emergencia 0.0015862187 0.004037860 UBA1829 0.0014009798 0.002725359 MGBC107952 0.0012891041 0.004275474 Evtepia 0.0012451890 0.002490315 Pseudomonas_E 0.0009940515 0.003108676 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() #Per time_point genus_summary %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus=factor(genus, levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~time_point)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) "],["alpha-diversity.html", "Chapter 6 Alpha diversity", " Chapter 6 Alpha diversity load(&quot;data/data.Rdata&quot;) # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% filter(genome %in% rownames(dist)) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) #Richness alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% ggplot(aes(y = value, x = time_point, group=time_point, color=time_point, fill=time_point)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC9900&quot;,&quot;#66CC99&quot;, &quot;#990066&quot;)) + scale_fill_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC990050&quot;,&quot;#66CC9950&quot;, &quot;#99006650&quot;)) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Neutral alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggplot(aes(y = value, x = time_point, group=time_point, color=time_point, fill=time_point)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC9900&quot;,&quot;#66CC99&quot;, &quot;#990066&quot;)) + scale_fill_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC990050&quot;,&quot;#66CC9950&quot;, &quot;#99006650&quot;)) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Phylogenetic alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% ggplot(aes(y = value, x = time_point, group=time_point, color=time_point, fill=time_point)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC9900&quot;,&quot;#66CC99&quot;, &quot;#990066&quot;)) + scale_fill_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC990050&quot;,&quot;#66CC9950&quot;, &quot;#99006650&quot;)) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Functional alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% ggplot(aes(y = value, x = time_point, group=time_point, color=time_point, fill=time_point)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC9900&quot;,&quot;#66CC99&quot;, &quot;#990066&quot;)) + scale_fill_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC990050&quot;,&quot;#66CC9950&quot;, &quot;#99006650&quot;)) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) + scale_x_discrete(name =&quot;Time-point&quot;, limits=c(&quot;2&quot;,&quot;1&quot;,&quot;0.5&quot;)) ) "],["beta-diversity.html", "Chapter 7 Beta diversity", " Chapter 7 Beta diversity load(&quot;data/data.Rdata&quot;) beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist) 7.0.1 Permanova #Richness betadisper(beta_q0n$S, sample_metadata$time_point) %&gt;% permutest(., pairwise = TRUE) adonis2(beta_q0n$S ~ time_point, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))) %&gt;% pull(individual)) %&gt;% broom::tidy() %&gt;% tt() #Neutral diversity betadisper(beta_q1n$S, sample_metadata$time_point) %&gt;% permutest(., pairwise = TRUE) adonis2(beta_q1n$S ~ time_point, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))) %&gt;% pull(individual)) %&gt;% broom::tidy() %&gt;% tt() #Phylogenetic diversity betadisper(beta_q1p$S, sample_metadata$time_point) %&gt;% permutest(., pairwise = TRUE) adonis2(beta_q1p$S ~ time_point, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))) %&gt;% pull(individual)) %&gt;% broom::tidy() %&gt;% tt() #Functional diversity betadisper(beta_q1f$S, sample_metadata$time_point) %&gt;% permutest(., pairwise = TRUE) adonis2(beta_q1f$S ~ time_point, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))) %&gt;% pull(individual)) %&gt;% broom::tidy() %&gt;% tt() 7.0.2 Richness diversity plot beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(time_point) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = time_point, fill = time_point, shape = as.factor(individual))) + scale_color_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC9900&quot;,&quot;#66CC99&quot;, &quot;#990066&quot;)) + scale_fill_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC990050&quot;,&quot;#66CC9950&quot;, &quot;#99006650&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) 7.0.3 Neutral diversity plot beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(time_point) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = time_point, fill = time_point, shape = as.factor(individual))) + scale_color_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC9900&quot;,&quot;#66CC99&quot;, &quot;#990066&quot;)) + scale_fill_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC990050&quot;,&quot;#66CC9950&quot;, &quot;#99006650&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) 7.0.4 Phylogenetic diversity plot beta_q1p$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(time_point) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = time_point, fill = time_point, shape = as.factor(individual))) + scale_color_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC9900&quot;,&quot;#66CC99&quot;, &quot;#990066&quot;)) + scale_fill_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC990050&quot;,&quot;#66CC9950&quot;, &quot;#99006650&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) 7.0.5 Functional diversity plot beta_q1f$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(time_point) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = time_point, fill = time_point, shape = as.factor(individual))) + scale_color_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC9900&quot;,&quot;#66CC99&quot;, &quot;#990066&quot;)) + scale_fill_manual(name=&quot;Time_point&quot;, breaks=c(&quot;Pre_antibiotics&quot;,&quot;Post_antibiotics_1&quot;, &quot;Post_antibiotics_2&quot;), labels=c(&quot;Pre_ant&quot;,&quot;Post_ant_1&quot;, &quot;Post_ant_2&quot;), values=c(&quot;#CC990050&quot;,&quot;#66CC9950&quot;, &quot;#99006650&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
